/**
 */
package org.palladiosimulator.edp2.models.measuringpoint.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;
import org.palladiosimulator.edp2.models.measuringpoint.util.MeasuringpointAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MeasuringpointItemProviderAdapterFactory extends MeasuringpointAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public MeasuringpointItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.StringMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected StringMeasuringPointItemProvider stringMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.StringMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createStringMeasuringPointAdapter() {
        if (stringMeasuringPointItemProvider == null) {
            stringMeasuringPointItemProvider = new StringMeasuringPointItemProvider(this);
        }

        return stringMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.AssemblyOperationMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AssemblyOperationMeasuringPointItemProvider assemblyOperationMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.AssemblyOperationMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAssemblyOperationMeasuringPointAdapter() {
        if (assemblyOperationMeasuringPointItemProvider == null) {
            assemblyOperationMeasuringPointItemProvider = new AssemblyOperationMeasuringPointItemProvider(this);
        }

        return assemblyOperationMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.AssemblyPassiveResourceMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected AssemblyPassiveResourceMeasuringPointItemProvider assemblyPassiveResourceMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.AssemblyPassiveResourceMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createAssemblyPassiveResourceMeasuringPointAdapter() {
        if (assemblyPassiveResourceMeasuringPointItemProvider == null) {
            assemblyPassiveResourceMeasuringPointItemProvider = new AssemblyPassiveResourceMeasuringPointItemProvider(this);
        }

        return assemblyPassiveResourceMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.ActiveResourceMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ActiveResourceMeasuringPointItemProvider activeResourceMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.ActiveResourceMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createActiveResourceMeasuringPointAdapter() {
        if (activeResourceMeasuringPointItemProvider == null) {
            activeResourceMeasuringPointItemProvider = new ActiveResourceMeasuringPointItemProvider(this);
        }

        return activeResourceMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.SystemOperationMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SystemOperationMeasuringPointItemProvider systemOperationMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.SystemOperationMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSystemOperationMeasuringPointAdapter() {
        if (systemOperationMeasuringPointItemProvider == null) {
            systemOperationMeasuringPointItemProvider = new SystemOperationMeasuringPointItemProvider(this);
        }

        return systemOperationMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.LinkingResourceMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected LinkingResourceMeasuringPointItemProvider linkingResourceMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.LinkingResourceMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createLinkingResourceMeasuringPointAdapter() {
        if (linkingResourceMeasuringPointItemProvider == null) {
            linkingResourceMeasuringPointItemProvider = new LinkingResourceMeasuringPointItemProvider(this);
        }

        return linkingResourceMeasuringPointItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.palladiosimulator.edp2.models.measuringpoint.SubSystemOperationMeasuringPoint} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SubSystemOperationMeasuringPointItemProvider subSystemOperationMeasuringPointItemProvider;

    /**
     * This creates an adapter for a {@link org.palladiosimulator.edp2.models.measuringpoint.SubSystemOperationMeasuringPoint}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSubSystemOperationMeasuringPointAdapter() {
        if (subSystemOperationMeasuringPointItemProvider == null) {
            subSystemOperationMeasuringPointItemProvider = new SubSystemOperationMeasuringPointItemProvider(this);
        }

        return subSystemOperationMeasuringPointItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (stringMeasuringPointItemProvider != null) stringMeasuringPointItemProvider.dispose();
        if (assemblyOperationMeasuringPointItemProvider != null) assemblyOperationMeasuringPointItemProvider.dispose();
        if (assemblyPassiveResourceMeasuringPointItemProvider != null) assemblyPassiveResourceMeasuringPointItemProvider.dispose();
        if (activeResourceMeasuringPointItemProvider != null) activeResourceMeasuringPointItemProvider.dispose();
        if (systemOperationMeasuringPointItemProvider != null) systemOperationMeasuringPointItemProvider.dispose();
        if (linkingResourceMeasuringPointItemProvider != null) linkingResourceMeasuringPointItemProvider.dispose();
        if (subSystemOperationMeasuringPointItemProvider != null) subSystemOperationMeasuringPointItemProvider.dispose();
    }

}
